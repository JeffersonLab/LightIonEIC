#! /usr/bin/perl
use Math::Trig;
use Math::Complex;
@XBJmin = (0.05,0.1,0.2,0.4,0.6,0.8);
@XBJmax =  (0.1,0.2,0.4,0.6,0.8,1.0);
#@XScale =  (4.0,4.0,4.0,4.0,2.5,2.0);   


@XScale =  (0.001,0.001,0.001,0.014,0.01);
                                                                  

 
@Q2min = (0.5,0.7,1.5,3.,4.,5.,6.,7.,8.,9.);
@Q2max = (0.7,1.5,3.,3.,5.,6.,7.,8.,9.,10.);
@Q2min2 = (0.5,1.0,2.,3.,4.,5.,6.,7.,8.,9.);
@Q2max2 = (1.0,2.0,3.,3.,5.,6.,7.,8.,9.,10.);

# @tmin = (0.,1.,2.,3.,4.,5.,6.,7.,8.);
# @tmax = (1.,2.,3.,4.,5.,6.,7.,8.,9.);
@tmin = (0.0,0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6);
@tmax = (0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8);
$pi=3.141592;
$dalpha_R =0.06;
system("rm -f  ./f2d_stf/x_*.data3a");
system("rm -f  ./f2d_stf/x_*.data4a");
$DIR = ".";

    $filename1a = "f2d_stf_ascii_tprim_crs1.dat";
#   $filename1a = "f2d_stf_ascii_tprim_crs.dat";
#    $filename1a = "f2d_stf_ascii_tprim_crs_spec.dat";
    $filename2a = "f2d_stf_ascii_tprim2.dat";


open(itf,"$DIR/$filename2a");
@itemp = <itf>;
close(itf);

$total =0;
for($pp=0;$pp<=$#itemp;$pp++){
    @vv = split(/, /,$itemp[$pp]);
    $ccount = $vv[3]/1.;
    $total = $total + $ccount;
}
printf ("total number of event = %7.2f\n",$total);

    for($ix=0;$ix<5;$ix++){
	$ixxmin = $XBJmin[$ix];
	$ixxmax = $XBJmax[$ix];
	$ixx = ($ixxmin+$ixxmax)/2;
	$ixn = $ix +1;
	$scalefactor = $XScale[$ix];

	for($iq=0;$iq<10;$iq++){
	    $iq2min = $Q2min[$iq];
	    $iq2max = $Q2max[$iq];
	    $iq2 = ($iq2min+$iq2max)/2;
	    $iqn = $iq +1;

	    open(out,">>./f2d_stf/x\_$ixn\_q2\_$iqn.data3a");
	    open(out2,">>./f2d_stf/x\_$ixn\_q2\_$iqn.data4a");
	    
	    open(ifile1,"$DIR/$filename1a");
	    @read1 = <ifile1>;
	    close(ifile1);
	    
	    open(ifile2,"$DIR/$filename2a");
	    @read2 = <ifile2>;
	    close(ifile2);
	    
	    for($jj=0;$jj<=$#read1;$jj++){
		@items1a =split(/,/,$read1[$jj]);
		@items2a =split(/,/,$read2[$jj]);
		$xb      =  $items1a[0]/1.;
		$q2      =  $items1a[1]/1.;
		$tprim   =  $items1a[2]/1.;
### si/1000
		$nevnt1a   =  $items1a[3]/1.;
### si0/1000
		$nevnt2a   =  $items2a[3]/1.;

		$sfac = 2/3;

		if($xb>$ixxmin&&$xb<$ixxmax){

		    if($q2>$iq2min&&$q2<$iq2max){
			
			$error1a   =  sqrt($nevnt1a);
			$error2a   =  sqrt($nevnt2a);
			
			if($nevnt1a!=0&&$nevnt2a!=0){	    
			    #$ratio = $nevnt1a/$nevnt2a/$sfac;
			    #$eratio = $ratio*(1/$error1a+1/$error2a)/$sfac;

			    $jacob = (1/5.656)*(1/(4*$pi))*(sqrt(1/2+$mprot**2/$tprim))/$dalpha_R/$scalefactor;
			    #$jacob =1/$dalpha_R/500;


#####  this is only for S*F2 structure function by remove nucleon pole
			    $ratio = $nevnt1a*$tprim**2*$jacob/$total;
			    $eratio = $ratio*sqrt(1/$error1a+1/sqrt($total));


#####  this is only for F2 structure function with nucleon pole allowed
#			     $ratio = $nevnt1a/$total;
#			     $eratio = sqrt(1/$error1a+1/sqrt($total));
			}
			printf out ("%6.3f, %6.3f, %8.4f, %10.5e, %10.6e\n",$xb,$q2,$tprim,$ratio,$eratio);
			if($tprim<0.025){
#			if($tprim<0.04){
			    printf out2 ("%6.3f, %6.3f, %8.4f, %10.5e, %10.6e\n",$xb,$q2,$tprim,$ratio,$eratio);
			}

		    }
		    
		}
	    }
	    close(out);
	    close(out2);
	}
}


